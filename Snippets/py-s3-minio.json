{
  "display_name": "Py-S3-Minio",
  "metadata": {
    "tags": [
      "S3",
      "Minio"
    ],
    "description": "Examples for pushing and fetching csv files to S3/Minio with python",
    "display_name": "Py-S3-Minio",
    "code": [
      "# S3 Storage ********************************************************************",
      "",
      "from minio import Minio",
      "from minio.commonconfig import Tags",
      "import pandas as pd",
      "from io import BytesIO",
      "import os",
      "",
      "# function to write object, tags and metadata",
      "def write_dataframe_as_csv_to_s3(df, bucket, filepath, tags={}, metadata={}):",
      "    # create Minio client and init bucket if necessary",
      "    client = Minio(",
      "        os.getenv(\"JUPYTERLAB_S3_ENDPOINT\").replace(\"http://\",\"\"),",
      "        secure=False,",
      "        access_key=os.getenv(\"JUPYTERLAB_S3_ACCESS_KEY_ID\"),",
      "        secret_key=os.getenv(\"JUPYTERLAB_S3_SECRET_ACCESS_KEY\"),",
      "    )",
      "    found = client.bucket_exists(bucket)",
      "    if not found:",
      "        client.make_bucket(bucket)",
      "",
      "    # init tags",
      "    t = Tags(for_object=True)",
      "    for k, v in tags.items():",
      "        t[k] = v",
      "",
      "    csv = df.to_csv().encode('utf-8')",
      "    client.put_object(",
      "        bucket,",
      "        filepath,",
      "        data=BytesIO(csv),",
      "        length=len(csv),",
      "        tags=t,",
      "        metadata=metadata,",
      "        content_type='application/csv'",
      "    )",
      "",
      "# function to read object, tags and metadeta",
      "def read_csv_as_dataframe_from_s3(bucket, filepath):",
      "    # create Minio client",
      "    client = Minio(",
      "        os.getenv(\"JUPYTERLAB_S3_ENDPOINT\").replace(\"http://\",\"\"),",
      "        secure=False,",
      "        access_key=os.getenv(\"JUPYTERLAB_S3_ACCESS_KEY_ID\"),",
      "        secret_key=os.getenv(\"JUPYTERLAB_S3_SECRET_ACCESS_KEY\"),",
      "    )",
      "    obj = client.get_object(bucket, filepath)",
      "    df  = pd.read_csv(obj)",
      "    tags = client.get_object_tags(bucket, filepath)",
      "    stat = client.stat_object(bucket, filepath)",
      "    headDict = stat.metadata",
      "    meta = {}",
      "    for key in headDict:",
      "        if key.startswith('x-amz-meta-'):",
      "            meta[key] = headDict[key]",
      "    return (df, tags, meta)",
      "",
      "# Examples -----------------------------------------------------------------------------",
      "",
      "# create dataframe and constants",
      "df = pd.DataFrame({",
      "    'one': [-1, 0, 2.5],",
      "    'two': ['foo', 'bar', 'baz'],",
      "    'three': [True, False, True]",
      "}, index=list('abc'))",
      "bucket = \"NAME_OF_THE_BUCKET!!!\" # <------ Use correct bucket name!",
      "filepath = \"onetwothree.csv\"",
      "tags = {\"color\": \"red\", \"size\": \"small\"}",
      "meta = {\"cat\": \"meow\", \"dog\": \"woof\", \"horse\": \"neigh\"}",
      "",
      "# write dataframe with tags and metadata to S3 storage",
      "write_dataframe_as_csv_to_s3(df, bucket, filepath, tags, meta)",
      "",
      "# read dataframe with tags and metadata from S3 storage",
      "read_csv_as_dataframe_from_s3(bucket, filepath)"
    ],
    "language": "Python"
  },
  "schema_name": "code-snippet"
}
